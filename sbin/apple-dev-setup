#!/usr/bin/env -S uv run --script
"""
Apple Developer Certificate Setup Tool

This script automates the process of setting up Apple Developer certificates
for code signing macOS applications built with mkdocs-portable.

Features:
- Interactive prompts for required information
- CSR (Certificate Signing Request) generation
- Opens Apple Developer portal for certificate creation
- Certificate installation and validation
- Automatic .apple-developer-config.json creation/update
"""

# /// script
# requires-python = ">=3.8"
# dependencies = [
#     "cryptography>=41.0.0",
#     "click>=8.0.0",
#     "rich>=13.0.0",
# ]
# ///

import json
import subprocess
import sys
import webbrowser
from datetime import datetime
from pathlib import Path
from typing import Dict, Optional, Tuple

import click
from cryptography import x509
from cryptography.hazmat.primitives import hashes, serialization
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.x509.oid import NameOID
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Confirm, Prompt
from rich.table import Table
from rich.text import Text

console = Console()


class AppleDeveloperSetup:
    """Handles Apple Developer certificate setup workflow."""
    
    def __init__(self):
        self.script_dir = Path(__file__).parent.parent
        self.config_file = self.script_dir / ".apple-developer-config.json"
        self.template_file = self.script_dir / "apple-developer-config.template.json"
        self.csr_file = Path.home() / "Desktop" / "CertificateSigningRequest.certSigningRequest"
        self.private_key_file = Path.home() / "Desktop" / "private_key.pem"
        
    def welcome(self):
        """Display welcome message and overview."""
        console.print(Panel.fit(
            "[bold blue]Apple Developer Certificate Setup[/bold blue]\n\n"
            "This tool will help you:\n"
            "• Generate a Certificate Signing Request (CSR)\n"
            "• Create a Developer ID Application certificate\n"
            "• Install the certificate in Keychain\n"
            "• Configure mkdocs-portable for code signing\n\n"
            "[yellow]Prerequisites:[/yellow]\n"
            "• Apple Developer Account ($99/year)\n"
            "• macOS with Keychain Access\n"
            "• Internet connection",
            title="🍎 Apple Developer Setup"
        ))
        
    def check_prerequisites(self) -> bool:
        """Check if prerequisites are met."""
        console.print("\n[bold]Checking prerequisites...[/bold]")
        
        # Check if we're on macOS
        try:
            result = subprocess.run(["uname"], capture_output=True, text=True)
            if "Darwin" not in result.stdout:
                console.print("❌ This tool requires macOS")
                return False
        except FileNotFoundError:
            console.print("❌ Unable to detect operating system")
            return False
            
        # Check if Keychain Access is available (try multiple locations)
        keychain_paths = [
            Path("/System/Library/CoreServices/Applications/Keychain Access.app"),
            Path("/Applications/Utilities/Keychain Access.app"),
            Path("/System/Applications/Utilities/Keychain Access.app")
        ]
        
        keychain_found = any(path.exists() for path in keychain_paths)
        if not keychain_found:
            console.print("❌ Keychain Access not found")
            return False
            
        # Check if security command is available
        try:
            result = subprocess.run(["security", "help"], capture_output=True, text=True)
            if result.returncode not in [0, 2]:  # security help returns 2 but is working
                console.print("❌ Security command not working properly")
                return False
        except FileNotFoundError:
            console.print("❌ Security command not available")
            return False
            
        console.print("✅ All prerequisites met")
        return True
        
    def load_existing_config(self) -> Optional[Dict]:
        """Load existing configuration if available."""
        if not self.config_file.exists():
            return None
            
        try:
            with open(self.config_file, 'r') as f:
                config = json.load(f)
                console.print(f"✅ Found existing config: {self.config_file}")
                return config
        except (json.JSONDecodeError, IOError) as e:
            console.print(f"⚠️  Error reading existing config: {e}")
            return None
            
    def save_progress(self, config: Dict, step: str):
        """Save progress to config file with current step information."""
        config['_progress'] = {
            'step': step,
            'timestamp': datetime.now().isoformat(),
            'completed_steps': config.get('_progress', {}).get('completed_steps', [])
        }
        
        if step not in config['_progress']['completed_steps']:
            config['_progress']['completed_steps'].append(step)
            
        try:
            with open(self.config_file, 'w') as f:
                json.dump(config, f, indent=2)
            self.config_file.chmod(0o600)
            console.print(f"💾 Progress saved: {step}")
        except IOError as e:
            console.print(f"⚠️  Could not save progress: {e}")
            
    def display_progress(self, config: Dict):
        """Display current progress status."""
        progress = config.get('_progress', {})
        completed_steps = progress.get('completed_steps', [])
        last_step = progress.get('step', 'unknown')
        timestamp = progress.get('timestamp', 'unknown')
        
        console.print(Panel(
            f"[bold]Resuming setup process...[/bold]\n\n"
            f"Last step: [cyan]{last_step}[/cyan]\n"
            f"Timestamp: [dim]{timestamp}[/dim]\n\n"
            f"Completed steps:\n" + 
            "\n".join([f"✅ {step.replace('_', ' ').title()}" for step in completed_steps]),
            title="📋 Progress Status"
        ))
        
    def display_current_config(self, config: Dict):
        """Display current configuration values."""
        table = Table(title="Current Configuration")
        table.add_column("Setting", style="cyan")
        table.add_column("Value", style="green")
        
        if config.get('appleId'):
            table.add_row("Apple ID", config['appleId'])
        if config.get('teamId'):
            table.add_row("Team ID", config['teamId'])
        if config.get('developerName'):
            table.add_row("Developer Name", config['developerName'])
        if config.get('countryCode'):
            table.add_row("Country Code", config['countryCode'])
        if config.get('identity'):
            table.add_row("Certificate Identity", config['identity'])
        if config.get('enabled'):
            table.add_row("Status", "✅ Enabled" if config['enabled'] else "❌ Disabled")
            
        console.print(table)
            
    def load_template_config(self) -> Dict:
        """Load template configuration."""
        try:
            with open(self.template_file, 'r') as f:
                template = json.load(f)
                # Remove template-specific fields
                template.pop('_comment', None)
                template.pop('_instructions', None)
                template.pop('example', None)
                return template
        except (json.JSONDecodeError, IOError) as e:
            console.print(f"❌ Error reading template: {e}")
            sys.exit(1)
            
    def gather_user_information(self, existing_config: Optional[Dict] = None) -> Dict:
        """Gather required information from user."""
        console.print("\n[bold]Gathering Apple Developer information...[/bold]")
        
        # Show existing information if available
        if existing_config and any(key in existing_config for key in ['appleId', 'teamId', 'developerName', 'countryCode']):
            console.print("[dim]Found existing information - press Enter to keep current values[/dim]")
        
        # Get Apple ID with existing value as default
        default_apple_id = existing_config.get('appleId', '') if existing_config else ''
        apple_id = Prompt.ask(
            "Apple ID (email address)",
            default=default_apple_id if default_apple_id else None
        )
        
        # Get Team ID with existing value as default
        default_team_id = existing_config.get('teamId', '') if existing_config else ''
        team_id = Prompt.ask(
            "Team ID (10-character alphanumeric)",
            default=default_team_id if default_team_id else None
        )
        
        # Get developer name with existing value as default
        default_developer_name = existing_config.get('developerName', '') if existing_config else ''
        developer_name = Prompt.ask(
            "Developer/Organization Name",
            default=default_developer_name if default_developer_name else None
        )
        
        # Get country code with existing value as default
        default_country_code = existing_config.get('countryCode', 'US') if existing_config else 'US'
        country_code = Prompt.ask("Country Code (2 letters)", default=default_country_code)
        
        user_info = {
            'appleId': apple_id,
            'teamId': team_id,
            'developerName': developer_name,
            'countryCode': country_code
        }
        
        # Save progress with user information
        config = existing_config or self.load_template_config()
        config.update(user_info)
        self.save_progress(config, "user_information_gathered")
        
        return user_info
        
    def generate_csr(self, user_info: Dict, existing_config: Optional[Dict] = None) -> Tuple[str, str]:
        """Generate Certificate Signing Request and private key."""
        console.print("\n[bold]Generating Certificate Signing Request...[/bold]")
        
        # Check if CSR already exists
        if self.csr_file.exists() and self.private_key_file.exists():
            if existing_config and existing_config.get('_progress', {}).get('completed_steps', []):
                if 'csr_generated' in existing_config['_progress']['completed_steps']:
                    console.print("✅ Using existing CSR and private key")
                    console.print(f"✅ CSR: {self.csr_file}")
                    console.print(f"✅ Private key: {self.private_key_file}")
                    return str(self.csr_file), str(self.private_key_file)
        
        # Generate private key
        private_key = rsa.generate_private_key(
            public_exponent=65537,
            key_size=2048,
        )
        
        # Create CSR
        subject = x509.Name([
            x509.NameAttribute(NameOID.COUNTRY_NAME, user_info['countryCode']),
            x509.NameAttribute(NameOID.ORGANIZATION_NAME, user_info['developerName']),
            x509.NameAttribute(NameOID.COMMON_NAME, user_info['developerName']),
        ])
        
        csr = x509.CertificateSigningRequestBuilder().subject_name(
            subject
        ).sign(private_key, hashes.SHA256())
        
        # Save private key
        private_key_pem = private_key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.PKCS8,
            encryption_algorithm=serialization.NoEncryption()
        )
        
        with open(self.private_key_file, 'wb') as f:
            f.write(private_key_pem)
            
        # Save CSR
        csr_pem = csr.public_bytes(serialization.Encoding.PEM)
        with open(self.csr_file, 'wb') as f:
            f.write(csr_pem)
            
        console.print(f"✅ CSR saved to: {self.csr_file}")
        console.print(f"✅ Private key saved to: {self.private_key_file}")
        console.print("⚠️  [yellow]Keep the private key secure![/yellow]")
        
        # Save progress
        config = existing_config or self.load_template_config()
        config.update(user_info)
        config['csrPath'] = str(self.csr_file)
        config['privateKeyPath'] = str(self.private_key_file)
        self.save_progress(config, "csr_generated")
        
        return str(self.csr_file), str(self.private_key_file)
        
    def open_apple_developer_portal(self, user_info: Dict):
        """Open Apple Developer portal for certificate creation."""
        console.print("\n[bold]Opening Apple Developer Portal...[/bold]")
        
        # URLs for Apple Developer portal
        certificates_url = "https://developer.apple.com/account/resources/certificates/list"
        
        console.print(Panel(
            f"[bold]Steps to create your certificate:[/bold]\n\n"
            f"1. Sign in with your Apple ID: [cyan]{user_info['appleId']}[/cyan]\n"
            f"2. Click the [bold blue]+[/bold blue] button to add a new certificate\n"
            f"3. Select [bold]Developer ID Application[/bold] (NOT iOS Distribution)\n"
            f"4. Upload your CSR file: [cyan]{self.csr_file}[/cyan]\n"
            f"5. Download the certificate (.cer file)\n"
            f"   • Default name: [dim]ios_distribution.cer[/dim]\n"
            f"   • Default location: [dim]~/Downloads/[/dim]\n"
            f"   • [yellow]Rename to:[/yellow] [cyan]developer_id_application.cer[/cyan]\n"
            f"6. Double-click [cyan]developer_id_application.cer[/cyan] to install in Keychain Access\n\n"
            f"[red]⚠️  Important:[/red] Choose [bold]Developer ID Application[/bold], not iOS Distribution!\n"
            f"[yellow]The browser will open automatically...[/yellow]",
            title="📋 Certificate Creation Steps"
        ))
        
        if Confirm.ask("Open Apple Developer Portal now?", default=True):
            webbrowser.open(certificates_url)
            
        # Wait for user to complete the process
        console.print("\n[yellow]Complete the certificate creation in your browser...[/yellow]")
        console.print(Panel(
            f"[bold]After downloading:[/bold]\n\n"
            f"1. Navigate to [cyan]~/Downloads/[/cyan]\n"
            f"2. Rename [dim]ios_distribution.cer[/dim] → [cyan]developer_id_application.cer[/cyan]\n"
            f"3. Double-click [cyan]developer_id_application.cer[/cyan]\n"
            f"4. Keychain Access will open - click [bold]Add[/bold]\n"
            f"5. Verify certificate appears in [bold]My Certificates[/bold]\n\n"
            f"[green]✅ Certificate should show:[/green]\n"
            f"[cyan]Developer ID Application: {user_info['developerName']} ({user_info['teamId']})[/cyan]",
            title="📥 Installation Instructions"
        ))
        Confirm.ask("Press Enter when you have downloaded and installed the certificate", default=True)
        
    def find_installed_certificate(self, user_info: Dict) -> Optional[str]:
        """Find the installed Developer ID Application certificate."""
        console.print("\n[bold]Looking for installed certificate...[/bold]")
        
        try:
            # Search for Developer ID Application certificates
            result = subprocess.run([
                "security", "find-certificate", 
                "-c", "Developer ID Application",
                "-p"
            ], capture_output=True, text=True, check=True)
            
            if result.stdout:
                # Parse certificate to get the identity
                cert_lines = result.stdout.strip().split('\n')
                
                # Look for certificates that match our team ID
                team_id = user_info['teamId']
                developer_name = user_info['developerName']
                
                # Try to get certificate details
                identity_result = subprocess.run([
                    "security", "find-identity", "-v", "-p", "codesigning"
                ], capture_output=True, text=True)
                
                if identity_result.returncode == 0:
                    for line in identity_result.stdout.split('\n'):
                        if "Developer ID Application" in line and team_id in line:
                            # Extract the identity string
                            parts = line.split('"')
                            if len(parts) >= 2:
                                identity = parts[1]
                                console.print(f"✅ Found certificate: {identity}")
                                return identity
                                
                # Fallback: construct identity string
                identity = f"Developer ID Application: {developer_name} ({team_id})"
                console.print(f"✅ Using constructed identity: {identity}")
                return identity
                
        except subprocess.CalledProcessError as e:
            console.print(f"❌ Error searching for certificate: {e}")
            
        return None
        
    def verify_certificate(self, identity: str) -> bool:
        """Verify that the certificate can be used for code signing."""
        console.print(f"\n[bold]Verifying certificate: {identity}[/bold]")
        
        try:
            # Try to use the certificate for code signing verification
            result = subprocess.run([
                "security", "find-identity", "-v", "-p", "codesigning"
            ], capture_output=True, text=True, check=True)
            
            if identity in result.stdout:
                console.print("✅ Certificate is valid for code signing")
                return True
            else:
                console.print("❌ Certificate not found in code signing identities")
                return False
                
        except subprocess.CalledProcessError as e:
            console.print(f"❌ Error verifying certificate: {e}")
            return False
            
    def create_config(self, user_info: Dict, identity: str) -> Dict:
        """Create the Apple Developer configuration."""
        config = self.load_template_config()
        
        config.update({
            'enabled': True,
            'identity': identity,
            'teamId': user_info['teamId'],
            'appleId': user_info['appleId'],
        })
        
        return config
        
    def save_config(self, config: Dict):
        """Save the configuration to file."""
        console.print(f"\n[bold]Saving configuration to: {self.config_file}[/bold]")
        
        try:
            with open(self.config_file, 'w') as f:
                json.dump(config, f, indent=2)
                
            # Set restrictive permissions
            self.config_file.chmod(0o600)
            
            console.print("✅ Configuration saved successfully")
            console.print("✅ File permissions set to 600 (owner read/write only)")
            
        except IOError as e:
            console.print(f"❌ Error saving configuration: {e}")
            sys.exit(1)
            
    def display_summary(self, config: Dict):
        """Display setup summary."""
        table = Table(title="🎉 Setup Complete!")
        table.add_column("Setting", style="cyan")
        table.add_column("Value", style="green")
        
        table.add_row("Apple ID", config['appleId'])
        table.add_row("Team ID", config['teamId'])
        table.add_row("Identity", config['identity'])
        table.add_row("Config File", str(self.config_file))
        table.add_row("Status", "✅ Ready for code signing")
        
        console.print(table)
        
        console.print(Panel(
            "[bold green]Your Apple Developer certificate is now configured![/bold green]\n\n"
            "You can now use mkdocs-portable with the --build-electron flag\n"
            "to create properly signed macOS applications.\n\n"
            "[yellow]Next steps:[/yellow]\n"
            "• Test with: mkdocs-portable --source-folder docs --with-electron --build-electron\n"
            "• Your apps will be automatically signed with your certificate\n"
            "• Users can install and run your apps without security warnings",
            title="🚀 Ready to Build!"
        ))
        
    def cleanup_temp_files(self):
        """Clean up temporary files."""
        if Confirm.ask("\nRemove temporary CSR and private key files from Desktop?", default=True):
            try:
                if self.csr_file.exists():
                    self.csr_file.unlink()
                    console.print(f"✅ Removed: {self.csr_file}")
                    
                if self.private_key_file.exists():
                    self.private_key_file.unlink()
                    console.print(f"✅ Removed: {self.private_key_file}")
                    
            except OSError as e:
                console.print(f"⚠️  Could not remove temporary files: {e}")
                
    def run(self):
        """Run the complete setup process."""
        self.welcome()
        
        if not self.check_prerequisites():
            sys.exit(1)
            
        # Load existing config if available
        existing_config = self.load_existing_config()
        
        # Show progress if resuming
        if existing_config and existing_config.get('_progress'):
            self.display_progress(existing_config)
        
        if existing_config and existing_config.get('enabled'):
            console.print("\n[yellow]Existing configuration found and enabled.[/yellow]")
            self.display_current_config(existing_config)
            if not Confirm.ask("Do you want to reconfigure?", default=False):
                console.print("✅ Using existing configuration")
                return
        elif existing_config and any(key in existing_config for key in ['appleId', 'teamId', 'developerName']):
            console.print("\n[blue]Found existing configuration data (not yet enabled).[/blue]")
            self.display_current_config(existing_config)
                
        # Gather user information
        user_info = self.gather_user_information(existing_config)
        
        # Generate CSR
        csr_path, private_key_path = self.generate_csr(user_info, existing_config)
        
        # Open Apple Developer portal
        self.open_apple_developer_portal(user_info)
        
        # Find installed certificate
        identity = self.find_installed_certificate(user_info)
        
        if not identity:
            console.print("❌ Could not find installed certificate")
            console.print("Please ensure you have downloaded and installed the certificate from Apple Developer portal")
            console.print("💾 Progress has been saved - you can re-run this script after installing the certificate")
            sys.exit(1)
            
        # Verify certificate
        if not self.verify_certificate(identity):
            console.print("❌ Certificate verification failed")
            sys.exit(1)
            
        # Create and save configuration
        config = self.create_config(user_info, identity)
        self.save_progress(config, "certificate_configured")
        self.save_config(config)
        
        # Display summary
        self.display_summary(config)
        
        # Cleanup
        self.cleanup_temp_files()


@click.command()
@click.option('--force', is_flag=True, help='Force reconfiguration even if config exists')
def main(force):
    """Apple Developer Certificate Setup Tool
    
    Automates the complete process of setting up Apple Developer certificates
    for code signing macOS applications built with mkdocs-portable.
    """
    try:
        setup = AppleDeveloperSetup()
        
        if force:
            console.print("[yellow]Force mode: Will reconfigure even if existing config is found[/yellow]")
            
        setup.run()
        
    except KeyboardInterrupt:
        console.print("\n\n[yellow]Setup cancelled by user[/yellow]")
        sys.exit(1)
    except Exception as e:
        console.print(f"\n[red]Unexpected error: {e}[/red]")
        console.print("[yellow]Please check the error and try again[/yellow]")
        sys.exit(1)


if __name__ == "__main__":
    main()

#!/bin/bash

# Update JavaScript/CSS Assets for MkDocs
# Generic script to fetch and update assets from CDNs or GitHub releases

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default configuration
ASSET_TYPE="mermaid"
ASSETS_DIR=""
FORCE_UPDATE=false
SKIP_BUILD_TEST=false

# Show usage
usage() {
    cat << EOF
Usage: $(basename "$0") [OPTIONS]

Update JavaScript/CSS assets for MkDocs projects.

OPTIONS:
    --asset-type TYPE       Asset to update (mermaid, mathjax, etc.) [default: mermaid]
    --assets-dir DIR        Directory to store assets [required]
    --force                 Force update even if latest version is installed
    --skip-build-test       Skip MkDocs build test after update
    --help                  Show this help message

EXAMPLES:
    # Update Mermaid in docs/assets/js/
    $(basename "$0") --asset-type mermaid --assets-dir docs/assets/js

    # Update MathJax
    $(basename "$0") --asset-type mathjax --assets-dir docs/assets/js

    # Force update Mermaid
    $(basename "$0") --asset-type mermaid --assets-dir docs/assets/js --force

SUPPORTED ASSETS:
    - mermaid   : Mermaid diagram library
    - mathjax   : MathJax mathematical notation
    
EOF
    exit 0
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --asset-type)
            ASSET_TYPE="$2"
            shift 2
            ;;
        --assets-dir)
            ASSETS_DIR="$2"
            shift 2
            ;;
        --force)
            FORCE_UPDATE=true
            shift
            ;;
        --skip-build-test)
            SKIP_BUILD_TEST=true
            shift
            ;;
        --help)
            usage
            ;;
        *)
            echo -e "${RED}‚ùå Unknown option: $1${NC}"
            usage
            ;;
    esac
done

# Validate required arguments
if [ -z "$ASSETS_DIR" ]; then
    echo -e "${RED}‚ùå Error: --assets-dir is required${NC}"
    usage
fi

# Asset-specific configuration
case "$ASSET_TYPE" in
    mermaid)
        GITHUB_REPO="mermaid-js/mermaid"
        ASSET_FILE="mermaid.min.js"
        USE_GITHUB_RELEASE=true
        ;;
    mathjax)
        GITHUB_REPO="mathjax/MathJax"
        ASSET_FILE="mathjax.min.js"
        USE_GITHUB_RELEASE=true
        ;;
    *)
        echo -e "${RED}‚ùå Unsupported asset type: ${ASSET_TYPE}${NC}"
        echo -e "${YELLOW}Supported types: mermaid, mathjax${NC}"
        exit 1
        ;;
esac

echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo -e "${BLUE}  MkDocs Asset Updater - ${ASSET_TYPE}${NC}"
echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo ""

echo -e "${YELLOW}üîç Checking for latest ${ASSET_TYPE} release...${NC}"

# Get latest release version from GitHub API
if [ "$USE_GITHUB_RELEASE" = true ]; then
    LATEST_VERSION=$(curl -s "https://api.github.com/repos/${GITHUB_REPO}/releases/latest" | \
        grep -o '"tag_name": *"[^"]*"' | \
        sed 's/"tag_name": *"v*\([^"]*\)"/\1/')
    
    if [ -z "$LATEST_VERSION" ]; then
        echo -e "${RED}‚ùå Failed to fetch latest version from GitHub${NC}"
        exit 1
    fi
else
    echo -e "${RED}‚ùå Non-GitHub sources not yet implemented${NC}"
    exit 1
fi

echo -e "${GREEN}üì¶ Latest ${ASSET_TYPE} version: v${LATEST_VERSION}${NC}"

# Check if we already have this version
VERSION_FILE="${ASSETS_DIR}/.${ASSET_TYPE}-version"
if [ -f "$VERSION_FILE" ] && [ "$FORCE_UPDATE" = false ]; then
    CURRENT_VERSION=$(cat "$VERSION_FILE")
    if [ "$CURRENT_VERSION" = "$LATEST_VERSION" ]; then
        echo -e "${GREEN}‚úÖ Already using latest version (v${LATEST_VERSION})${NC}"
        exit 0
    fi
    echo -e "${YELLOW}Updating from v${CURRENT_VERSION} to v${LATEST_VERSION}${NC}"
else
    if [ "$FORCE_UPDATE" = true ]; then
        echo -e "${YELLOW}üîÑ Force updating to v${LATEST_VERSION}${NC}"
    else
        echo -e "${YELLOW}üì• Installing ${ASSET_TYPE} v${LATEST_VERSION}${NC}"
    fi
fi

# Create assets directory if it doesn't exist
mkdir -p "$ASSETS_DIR"

# Determine download URL based on asset type
case "$ASSET_TYPE" in
    mermaid)
        DOWNLOAD_URL="https://unpkg.com/mermaid@${LATEST_VERSION}/dist/mermaid.min.js"
        ;;
    mathjax)
        DOWNLOAD_URL="https://cdn.jsdelivr.net/npm/mathjax@${LATEST_VERSION}/es5/tex-mml-chtml.js"
        ;;
esac

echo -e "${YELLOW}‚¨áÔ∏è  Downloading from: ${DOWNLOAD_URL}${NC}"

# Download the asset
if curl -f -L -o "${ASSETS_DIR}/${ASSET_FILE}" "$DOWNLOAD_URL"; then
    echo -e "${GREEN}‚úÖ Successfully downloaded ${ASSET_TYPE} v${LATEST_VERSION}${NC}"
    
    # Save version info
    echo "$LATEST_VERSION" > "$VERSION_FILE"
    
    # Show file info
    if command -v ls &> /dev/null; then
        FILE_SIZE=$(ls -lah "${ASSETS_DIR}/${ASSET_FILE}" | awk '{print $5}')
        echo -e "${GREEN}üìÅ File size: ${FILE_SIZE}${NC}"
    fi
    
    # Test MkDocs build if not skipped
    if [ "$SKIP_BUILD_TEST" = false ]; then
        echo -e "${YELLOW}üî® Testing MkDocs build...${NC}"
        
        # Try different MkDocs invocation methods
        if command -v mkdocs &> /dev/null; then
            if mkdocs build --quiet 2>/dev/null; then
                echo -e "${GREEN}‚úÖ MkDocs build successful with ${ASSET_TYPE} v${LATEST_VERSION}${NC}"
            else
                echo -e "${YELLOW}‚ö†Ô∏è  MkDocs build test skipped (build failed, but asset downloaded)${NC}"
            fi
        elif command -v uv &> /dev/null; then
            if uv run mkdocs build --quiet 2>/dev/null; then
                echo -e "${GREEN}‚úÖ MkDocs build successful with ${ASSET_TYPE} v${LATEST_VERSION}${NC}"
            else
                echo -e "${YELLOW}‚ö†Ô∏è  MkDocs build test skipped (build failed, but asset downloaded)${NC}"
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è  MkDocs not found, skipping build test${NC}"
        fi
    fi
    
    echo ""
    echo -e "${GREEN}üéâ ${ASSET_TYPE} successfully updated to v${LATEST_VERSION}${NC}"
    echo -e "${GREEN}   Location: ${ASSETS_DIR}/${ASSET_FILE}${NC}"
else
    echo -e "${RED}‚ùå Failed to download ${ASSET_TYPE} v${LATEST_VERSION}${NC}"
    exit 1
fi

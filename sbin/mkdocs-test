#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">=3.8"
# dependencies = []
# ///
"""
Test Portable MkDocs Site

This script validates that a portable MkDocs site created by mkdocs-portable
is properly configured and ready to use. It checks for required files,
validates the MkDocs configuration, and provides helpful feedback.

Features:
- Validates portable site structure
- Checks for required files and scripts
- Tests MkDocs configuration validity
- Provides detailed status reporting
- Cross-platform compatibility testing

Usage:
  mkdocs-test --target-folder TARGET_FOLDER [options]

Examples:
  # Test a portable site
  mkdocs-test --target-folder portable_docs

  # Test with verbose output
  mkdocs-test --target-folder my_docs --verbose

  # Test specific components only
  mkdocs-test --target-folder docs --check-files-only

Perfect for validating portable documentation sites before distribution!
"""

import subprocess
import sys
from pathlib import Path
from typing import List, Optional


def check_required_files(target_dir: Path, verbose: bool = False) -> bool:
    """Check if all required files are present."""
    required_files = [
        "mkdocs.yml",
        "pyproject.toml", 
        "README.md",
        "run_windows.bat",
        "run_windows.ps1",
        "run_unix.sh",
        "docs/index.md"
    ]
    
    print("Checking required files...")
    all_files_present = True
    
    for file in required_files:
        file_path = target_dir / file
        if file_path.exists():
            print(f"  ‚úÖ {file}")
            if verbose and file_path.is_file():
                size = file_path.stat().st_size
                print(f"     Size: {size} bytes")
        else:
            print(f"  ‚ùå {file} - MISSING")
            all_files_present = False
    
    return all_files_present


def check_docs_content(target_dir: Path, verbose: bool = False) -> bool:
    """Check documentation content."""
    docs_dir = target_dir / "docs"
    
    if not docs_dir.exists():
        print("‚ùå docs/ directory missing")
        return False
    
    # Count markdown files
    md_files = list(docs_dir.glob("**/*.md"))
    print(f"\nüìÑ Documentation files: {len(md_files)} total")
    
    if verbose:
        for md_file in sorted(md_files):
            rel_path = md_file.relative_to(docs_dir)
            size = md_file.stat().st_size
            print(f"  üìù {rel_path} ({size} bytes)")
    
    # Check for common documentation patterns
    common_files = ["index.md", "README.md"]
    found_common = []
    
    for common_file in common_files:
        if (docs_dir / common_file).exists():
            found_common.append(common_file)
    
    if found_common:
        print(f"  ‚úÖ Common files found: {', '.join(found_common)}")
    
    # Check subdirectories
    subdirs = [d for d in docs_dir.iterdir() if d.is_dir() and not d.name.startswith('.')]
    if subdirs:
        print(f"  üìÅ Subdirectories: {len(subdirs)}")
        if verbose:
            for subdir in sorted(subdirs):
                subdir_files = len(list(subdir.glob("*.md")))
                print(f"    üìÅ {subdir.name}/ ({subdir_files} files)")
    
    return len(md_files) > 0


def check_run_scripts(target_dir: Path, verbose: bool = False) -> bool:
    """Check if run scripts are properly configured."""
    print("\nChecking run scripts...")
    
    scripts = [
        ("run_windows.bat", "Windows Batch"),
        ("run_windows.ps1", "Windows PowerShell"),
        ("run_unix.sh", "Unix Shell")
    ]
    
    all_scripts_ok = True
    
    for script_name, script_type in scripts:
        script_path = target_dir / script_name
        if script_path.exists():
            print(f"  ‚úÖ {script_name} ({script_type})")
            
            if verbose:
                # Check if script contains expected commands
                content = script_path.read_text(encoding='utf-8', errors='ignore')
                if 'uv sync' in content and 'mkdocs serve' in content:
                    print(f"     Contains expected commands")
                else:
                    print(f"     ‚ö†Ô∏è  May be missing expected commands")
                    
                # Check Unix script permissions
                if script_name == "run_unix.sh":
                    if script_path.stat().st_mode & 0o111:
                        print(f"     Executable permissions: ‚úÖ")
                    else:
                        print(f"     Executable permissions: ‚ùå")
                        all_scripts_ok = False
        else:
            print(f"  ‚ùå {script_name} - MISSING")
            all_scripts_ok = False
    
    return all_scripts_ok


def check_electron_files(target_dir: Path, verbose: bool = False) -> Optional[bool]:
    """Check if Electron files are present and configured."""
    electron_files = [
        "package.json",
        "electron/main.js"
    ]
    
    # Check if any Electron files exist
    has_electron_files = any((target_dir / f).exists() for f in electron_files)
    
    if not has_electron_files:
        return None  # No Electron files, which is fine
    
    print("\nChecking Electron application files...")
    all_electron_ok = True
    
    for file in electron_files:
        file_path = target_dir / file
        if file_path.exists():
            print(f"  ‚úÖ {file}")
            if verbose and file == "package.json":
                # Check package.json content
                try:
                    import json
                    with open(file_path, 'r') as f:
                        package_data = json.load(f)
                    
                    if 'electron' in package_data.get('devDependencies', {}):
                        print(f"     Electron dependency: ‚úÖ")
                    if 'build' in package_data:
                        print(f"     Build configuration: ‚úÖ")
                except Exception as e:
                    print(f"     ‚ö†Ô∏è  Could not parse package.json: {e}")
        else:
            print(f"  ‚ùå {file} - MISSING")
            all_electron_ok = False
    
    # Check for build scripts
    build_scripts = ["build_electron_windows.bat", "build_electron_unix.sh"]
    for script in build_scripts:
        script_path = target_dir / script
        if script_path.exists():
            print(f"  ‚úÖ {script}")
        else:
            print(f"  ‚ùå {script} - MISSING")
            all_electron_ok = False
    
    return all_electron_ok


def test_mkdocs_config(target_dir: Path, verbose: bool = False) -> bool:
    """Test MkDocs configuration validity."""
    print("\nTesting MkDocs configuration...")
    
    mkdocs_yml = target_dir / "mkdocs.yml"
    if not mkdocs_yml.exists():
        print("  ‚ùå mkdocs.yml not found")
        return False
    
    try:
        # Change to target directory for relative path resolution
        original_cwd = Path.cwd()
        import os
        os.chdir(target_dir)
        
        # Try to validate the config
        result = subprocess.run(
            [sys.executable, "-c", 
             "import mkdocs.config; config = mkdocs.config.load_config('mkdocs.yml'); print('Config loaded successfully')"],
            capture_output=True,
            text=True,
            timeout=30
        )
        
        os.chdir(original_cwd)
        
        if result.returncode == 0:
            print("  ‚úÖ MkDocs configuration is valid")
            if verbose:
                print("     Configuration loaded without errors")
            return True
        else:
            print("  ‚ùå MkDocs configuration error:")
            print(f"    {result.stderr.strip()}")
            return False
            
    except subprocess.TimeoutExpired:
        print("  ‚ö†Ô∏è  MkDocs validation timed out (but config file exists)")
        return True  # Assume it's OK if it times out
    except Exception as e:
        print(f"  ‚ö†Ô∏è  Could not test MkDocs config: {e}")
        print("     (This is OK if MkDocs is not installed)")
        return True  # Assume it's OK if we can't test


def test_uv_config(target_dir: Path, verbose: bool = False) -> bool:
    """Test uv configuration."""
    print("\nTesting uv configuration...")
    
    pyproject_toml = target_dir / "pyproject.toml"
    if not pyproject_toml.exists():
        print("  ‚ùå pyproject.toml not found")
        return False
    
    try:
        # Try to parse the pyproject.toml
        content = pyproject_toml.read_text(encoding='utf-8')
        
        # Basic checks
        if '[project]' in content:
            print("  ‚úÖ Project configuration found")
        else:
            print("  ‚ùå Missing [project] section")
            return False
            
        if 'mkdocs' in content:
            print("  ‚úÖ MkDocs dependency found")
        else:
            print("  ‚ùå Missing MkDocs dependency")
            return False
            
        if verbose:
            # Try to validate with uv (if available)
            try:
                original_cwd = Path.cwd()
                import os
                os.chdir(target_dir)
                
                result = subprocess.run(
                    ["uv", "tree", "--quiet"],
                    capture_output=True,
                    text=True,
                    timeout=10
                )
                
                os.chdir(original_cwd)
                
                if result.returncode == 0:
                    print("     uv can read the configuration")
                else:
                    print("     ‚ö†Ô∏è  uv reported issues (may need sync)")
                    
            except (subprocess.TimeoutExpired, FileNotFoundError):
                print("     uv not available for validation")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Error reading pyproject.toml: {e}")
        return False


def parse_args():
    """Parse command line arguments."""
    import argparse
    
    parser = argparse.ArgumentParser(
        description="Test portable MkDocs site configuration and files",
        epilog="Examples:\n"
               "  mkdocs-test --target-folder portable_docs\n"
               "  mkdocs-test --target-folder my_docs --verbose\n"
               "  mkdocs-test --target-folder docs --check-files-only",
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    
    parser.add_argument("--target-folder", required=True,
                       help="Target folder containing the portable site")
    parser.add_argument("--verbose", "-v", action="store_true",
                       help="Show detailed information about each check")
    parser.add_argument("--check-files-only", action="store_true",
                       help="Only check for required files, skip configuration tests")
    
    return parser.parse_args()


def main():
    """Main function to test the portable MkDocs site."""
    args = parse_args()
    
    target_dir = Path(args.target_folder).resolve()
    
    print(f"Testing portable MkDocs site...")
    print(f"Location: {target_dir}")
    print()
    
    # Check if directory exists
    if not target_dir.exists():
        print("‚ùå Error: Target directory not found!")
        print("Create a portable site first using mkdocs-portable.")
        return False
    
    # Run tests
    all_tests_passed = True
    
    # Check required files
    files_ok = check_required_files(target_dir, args.verbose)
    all_tests_passed = all_tests_passed and files_ok
    
    # Check documentation content
    docs_ok = check_docs_content(target_dir, args.verbose)
    all_tests_passed = all_tests_passed and docs_ok
    
    # Check run scripts
    scripts_ok = check_run_scripts(target_dir, args.verbose)
    all_tests_passed = all_tests_passed and scripts_ok
    
    # Check Electron files (if present)
    electron_ok = check_electron_files(target_dir, args.verbose)
    if electron_ok is not None:
        all_tests_passed = all_tests_passed and electron_ok
    
    # Configuration tests (unless files-only mode)
    if not args.check_files_only:
        # Test uv configuration
        uv_ok = test_uv_config(target_dir, args.verbose)
        all_tests_passed = all_tests_passed and uv_ok
        
        # Test MkDocs configuration
        mkdocs_ok = test_mkdocs_config(target_dir, args.verbose)
        all_tests_passed = all_tests_passed and mkdocs_ok
    
    # Summary
    print("\n" + "="*60)
    if all_tests_passed:
        print("‚úÖ SUCCESS: Portable site is ready!")
        print("\nTo use the documentation:")
        print(f"1. Navigate to: {target_dir}")
        print("2. Run the appropriate script:")
        print("   - Windows: run_windows.bat")
        print("   - Mac/Linux: ./run_unix.sh")
        print("3. Open browser to http://localhost:8000")
        
        if electron_ok:
            print("\nüì± Desktop applications are also available!")
            print("   Check the 'dist' folder for built applications.")
        
        return True
    else:
        print("‚ùå FAILED: Some tests failed")
        print("\nPlease fix the issues above before using the portable site.")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
